given unordered map
rooms and timeslots must be unique

1 7
2 7

room 1: 7 8 9 10 11 12 1 2
room 2: 7 8 9 10 11 12 1 2
room 3: 7 8 9 10 11 12 1 2

t1, t2, t3, t4, t5


r1 1 1
r1 1 2

r2 2 1
r3 2 2

t1


section -> teachers, room, timeslot
teacher -> room, section, timeslot


class -> teacher + section


room -> for every timeslot, has class
given a room, it can only handle one class at give timeslot


class penalty if:
    1. class have two different rooms with same timeslots
    2. different class have same rooms with same timeslots

room penalty if:
    1. same class at same timeslot at different rooms
    2. same room have more than one class at the same timeslots

teacher penalty if:
    1. more than one class at same timeslot


6  0 0 3
0  0 0 6
13 0 0 7
1  0 1 1
11 0 1 2
2  0 1 5
15 0 1 7

4  1 0 0
3  1 0 4
9  1 0 5
5  1 1 0
8  1 1 0
10 1 1 2
14 1 1 5
7  1 1 7
12 1 1 7


2  0 0 2
7  0 0 4
8  0 0 7
12 0 0 7
14 0 1 2
6  0 1 5

1  1 0 2
13 1 0 2
15 1 0 6
5  1 1 0
4  1 1 1
9  1 1 3
3  1 1 4
0  1 1 5
10 1 1 5
11 1 1 7

1   0   0 4
9   0   0 5
14  0   0 0
24  0   0 0
25  0   0 2
0   0   1 1
5   0   1 6
10  0   1 0
12  0   1 4
21  0   1 6
23  0   1 7
2   1   0 0
4   1   0 7
6   1   0 1
7   1   0 0
11  1   0 4
17  1   0 0
18  1   0 5
19  1   0 7
20  1   0 7
22  1   0 7
3   1   1 7
8   1   1 0
13  1   1 0
15  1   1 4
16  1   1 6



_0   0   1      2
_2   0   1      0
_9   0   1      5
_15  0   1      0
_16  0   1      2
_19  0   1      0
_20  0   1      1
_21  0   1      3
_24  0   1      5
_4   0   0      4
_5   0   0      4
_13  0   0      0
_18  0   0      4
_23  0   0      6
_1   1   0      4
_6   1   0      2
_7   1   0      7
_8   1   0      3
_10  1   0      2
_12  1   0      1
_14  1   0      5
_22  1   0      0
_25  1   0      0
_3   1   1      0
_11  1   1      3
_17  1   1      2


0   0  0   6
1   0  1   2
2   0  0   5
3   1  0   4
4   1  0   3
5   0  1   4
6   0  0   2
7   1  1   1
8   0  1   0
9   1  0   0
10  1  1   3
11  0  1   6
12  1  1   7
13  1  1   7
14  1  1   5
15  1  0   1

timetable initialization example

curriculum [
    {
        subjects {
            math science
        }
        sections: 4
    }

    {
        subjects {
            history filipino
        }
        sections: 2
    }
]

teachers [
    {
        teacher_id
        class_id
        timeslot
    }
]

rooms [
    {
        room_id
        class_id
        timeslot
    }
]

   0    1   1    6   8    4
   1    1   2    2  11    3
   2    1   3    1  11    4
   3    1   4    6  10    5
   4    1   5    9   7    3
   5    1   6    0  13    6
   6    1   7   11  11    6
   7    2   1    4   3    5
   8    2   2    1  12    3
   9    2   3    4   6    0
  10    2   4   12   1    5
  11    2   5   13  10    0
  12    2   6    0   6    4
  13    2   7   12   0    6
  14    3   1    1   5    6
  15    3   2   10   0    3
  16    3   3   12  11    2
  17    3   4   10   3    6
  18    3   5   11   2    5
  19    3   6    6   3    1
  20    3   7   14   5    1
  21    4   1    6   5    3
  22    4   2    9   1    4
  23    4   3    0   0    5
  24    4   4   13   7    6
  25    4   5    1   2    1
  26    4   6    3  10    4
  27    4   7   11   6    3
  28    5   1    2   0    1
  29    5   2    5   1    1
  30    5   3    9  14    5
  31    5   4   12  13    1
  32    5   5    7   5    5
  33    5   6    7   4    4
  34    5   7    7   1    6
  35    6   1    3   1    3
  36    6   2    5   2    4
  37    6   3   10  14    0
  38    6   4    7  12    0
  39    6   5    9  11    0
  40    6   6    1   7    2
  41    6   7    6  14    2
  42    7   1   14   5    2
  43    7   2   13   0    4
  44    7   3    1   6    5
  45    7   4    3  12    1
  46    7   5    8   4    0
  47    7   6    9   2    2
  48    7   7   12   9    3
  49    8   1    4   1    2
  50    8   2   11   6    1
  51    8   3   13   8    5
  52    8   4    2   8    6
  53    8   5    2   1    0
  54    8   6   14  12    5
  55    8   7   10   7    4
  56    9   1    7   4    3
  57    9   2    1   2    0
  58    9   3    5   0    2
  59    9   4    8   8    3
  60    9   5   10  13    5
  61    9   6   14  14    6
  62    9   7   13  10    3
  63   10   1    9   4    1
  64   10   2    5   9    6
  65   10   3    9   2    6
  66   10   4   14   9    4
  67   10   5    3   3    2
  68   10   6    0  10    2
  69   10   7   14   7    0
  70   11   1    6  12    6
  71   11   2   14  13    3
  72   11   3   13   7    1
  73   11   4    2   9    5
  74   11   5    7  12    2
  75   11   6   12  12    4
  76   11   7   12   5    0
  77   12   1    8   7    5
  78   12   2    4   4    6
  79   12   3    3  10    6
  80   12   4    5   2    3
  81   12   5   10  10    1
  82   12   6    4   3    3
  83   12   7   11   9    2
  84   13   1    8  13    4
  85   13   2    8  13    2
  86   13   3    2   8    2
  87   13   4    3   0    0
  88   13   5    4   8    1
  89   13   6    8   6    6
  90   13   7    3  11    5
  91   14   1    6   8    0
  92   14   2    8   9    1
  93   14   3    4  14    4
  94   14   4    2   3    4
  95   14   5    7  14    1
  96   14   6    0  13    0
  97   14   7   10   6    2
  98   15   1   13   4    2
  99   15   2    5   9    0
 100   15   3   11   3    0
 101   15   4    5   4    5
 102   15   5    0  11    1
 103   15   6    0  14    3
 104   15   7   11   5    4

 int16_t hasConflictingRoomTimeslots(const std::vector<ClassRoom>& rooms) const {
		std::unordered_set<int> class_timeslot;
		std::unordered_set<int> room_timeslot_set;
		int16_t conflicting_timeslots = 0;
		int16_t conflicting_rooms = 0;

		for (const auto& room : rooms) {
			if (room.school_class_id == -1) continue;

			if (!class_timeslot.insert(combine(static_cast<int>(room.school_class_id), static_cast<int>(room.timeslot))).second) {
				conflicting_timeslots++;
			}

			if (!room_timeslot_set.insert(combine(static_cast<int>(room.room_id), static_cast<int>(room.timeslot))).second) {
				conflicting_rooms++;
			}
		}

		// std::cout << "class_timeslot conflict : " << conflicting_timeslots << std::endl;
		// std::cout << "room_timeslot_set conflict : " << conflicting_rooms << std::endl;
		// std::cout << "+ conflict : " << conflicting_timeslots + conflicting_rooms << std::endl;
		return conflicting_timeslots + conflicting_rooms;
	}
int16_t hasConflictingTeacherAssignments(const std::vector<Teacher>& teachers, const std::vector<SchoolClass>& schoolClasses) const {
		std::unordered_set<int> teacher_class_assignment_set;
		std::unordered_set<int> teacher_timeslot_set;
		int16_t conflicting_assignments = 0;
		int16_t conflicting_timeslots = 0;
		int16_t invalid_teacher_subject_assignment = 0;

		for (const auto& teacher : teachers) {
			if (teacher.school_class_id == -1) continue;

			if (!teacher_class_assignment_set.insert(combine(static_cast<int>(teacher.school_class_id), static_cast<int>(teacher.timeslot))).second) {
				conflicting_assignments++;
			}

			if (!teacher_timeslot_set.insert(combine(static_cast<int>(teacher.teacher_id), static_cast<int>(teacher.timeslot))).second) {
				conflicting_timeslots++;
			}

			const auto& school_class = schoolClasses.at(teacher.school_class_id);
			if (!isQualified(teacher.teacher_id, school_class.subject_id)) {
				// std::cout << "invalid teacher subject assignment asdfasdfasdf: " << teacher.teacher_id << " " << school_class.subject_id << std::endl;
				invalid_teacher_subject_assignment++;
			}
		}

		// std::cout << "teacher assignment conflict : " << conflicting_timeslots << std::endl;
		// std::cout << "teacher timeslot conflict : " << conflicting_assignments << std::endl;
		// std::cout << "invalid_teacher_subject_assignment : " << invalid_teacher_subject_assignment << std::endl;
		// std::cout << "+ conflict : " << conflicting_timeslots + conflicting_assignments << std::endl;
		return conflicting_timeslots + conflicting_assignments + invalid_teacher_subject_assignment;
	}

   0   1   1  27  33   5
   1   1   2   7  33   0
   2   1   3   2  33   6
   3   1   4  20  33   2
   4   1   5   4  33   1
   5   1   6  25  33   4
   6   1   7  15  33   3
   7   2   1  24  31   3
   8   2   2   4  31   5
   9   2   3  15  31   4
  10   2   4  15  31   2
  11   2   5  39  31   0
  12   2   6   5  31   6
  13   2   7   9  31   1
  14   3   1  39  32   1
  15   3   2  36  32   5
  16   3   3  27  32   3
  17   3   4  14  32   2
  18   3   5  39  32   6
  19   3   6  11  32   4
  20   3   7  26  32   0
  21   4   1   6  34   2
  22   4   2   6  34   3
  23   4   3   0  34   1
  24   4   4  31  34   0
  25   4   5  21  34   4
  26   4   6  33  34   5
  27   4   7  12  34   6
  28   5   1  13  17   6
  29   5   2  33  17   4
  30   5   3  11  17   2
  31   5   4  23  17   1
  32   5   5   5  17   5
  33   5   6  22  17   0
  34   5   7  38  17   3
  35   6   1  18  34   1
  36   6   2  16  34   2
  37   6   3  29  34   3
  38   6   4   1  34   0
  39   6   5   5  34   4
  40   6   6  13  34   5
  41   6   7  32  34   6
  42   7   1  25  16   6
  43   7   2  28  16   5
  44   7   3  24  16   1
  45   7   4  12  16   3
  46   7   5  17  16   4
  47   7   6  29  16   2
  48   7   7  25  16   0
  49   8   1  34  34   0
  50   8   2  23  34   4
  51   8   3  17  34   3
  52   8   4  37  34   2
  53   8   5  15  34   5
  54   8   6  32  34   1
  55   8   7  17  34   6
  56   9   1   6  33   4
  57   9   2  30  33   1
  58   9   3  10  33   2
  59   9   4  14  33   6
  60   9   5  23  33   0
  61   9   6  39  33   3
  62   9   7   8  33   5
  63  10   1  20  27   1
  64  10   2  32  27   4
  65  10   3  16  27   6
  66  10   4  22  27   2
  67  10   5  32  27   5
  68  10   6  19  27   3
  69  10   7  21  27   0
  70  11   1  38  17   1
  71  11   2  24  17   6
  72  11   3  36  17   0
  73  11   4   5  17   3
  74  11   5  25  17   2
  75  11   6  21  17   5
  76  11   7  12  17   4
  77  12   1  24   7   0
  78  12   2  10   7   6
  79  12   3  34   7   2
  80  12   4  15   7   1
  81  12   5  10   7   3
  82  12   6   4   7   4
  83  12   7  16   7   5
  84  13   1  38  23   4
  85  13   2  11  23   6
  86  13   3  21  23   2
  87  13   4   6  23   1
  88  13   5   6  23   0
  89  13   6  31  23   5
  90  13   7   9  23   3
  91  14   1  18  10   6
  92  14   2  14  10   1
  93  14   3   1  10   4
  94  14   4  39  10   5
  95  14   5  35  10   2
  96  14   6  28  10   3
  97  14   7  37  10   0
  98  15   1   2   0   0
  99  15   2  23   0   5
 100  15   3   0   0   6
 101  15   4  26   0   1
 102  15   5   3   0   2
 103  15   6  37   0   3
 104  15   7  13   0   4
 105  16   1  31   7   2
 106  16   2   8   7   3
 107  16   3  14   7   5
 108  16   4  19   7   1
 109  16   5  34   7   4
 110  16   6  29   7   0
 111  16   7   3   7   6
 112  17   1   6  15   6
 113  17   2  31  15   1
 114  17   3  30  15   3
 115  17   4  35  15   0
 116  17   5  24  15   5
 117  17   6  28  15   2
 118  17   7  18  15   4
 119  18   1  38   1   6
 120  18   2  18   1   0
 121  18   3  16   1   1
 122  18   4  28   1   4
 123  18   5  13   1   2
 124  18   6  37   1   5
 125  18   7  32   1   3
 126  19   1   3  37   3
 127  19   2  19  37   6
 128  19   3  24  37   2
 129  19   4  19  37   5
 130  19   5   1  37   1
 131  19   6   5  37   0
 132  19   7  14  37   4
 133  20   1  11  20   3
 134  20   2  26  20   6
 135  20   3   4  20   2
 136  20   4   2  20   5
 137  20   5  13  20   0
 138  20   6  28  20   1
 139  20   7  16  20   4
 140  21   1  37  10   6
 141  21   2  37  10   4
 142  21   3  31  10   3
 143  21   4   8  10   2
 144  21   5  21  10   1
 145  21   6   1  10   5
 146  21   7  11  10   0
 147  22   1   7  13   6
 148  22   2  19  13   4
 149  22   3  37  13   1
 150  22   4   7  13   3
 151  22   5  25  13   5
 152  22   6  17  13   0
 153  22   7  32  13   2
 154  23   1  24   3   4
 155  23   2  25   3   3
 156  23   3  22   3   5
 157  23   4  35   3   1
 158  23   5  38   3   2
 159  23   6   4   3   6
 160  23   7  12   3   0
 161  24   1   7  37   1
 162  24   2  20  37   4
 163  24   3  34  37   5
 164  24   4  16  37   0
 165  24   5  26  37   2
 166  24   6  35  37   6
 167  24   7  22  37   3
 168  25   1  20   4   0
 169  25   2   9   4   4
 170  25   3  12   4   1
 171  25   4   7   4   5
 172  25   5  15   4   6
 173  25   6  33   4   3
 174  25   7  33   4   2
 175  26   1  18  16   5
 176  26   2   8  16   0
 177  26   3   2  16   2
 178  26   4   2  16   1
 179  26   5  14  16   3
 180  26   6   2  16   4
 181  26   7  21  16   6
 182  27   1  18  23   3
 183  27   2  10  23   4
 184  27   3  27  23   1
 185  27   4  10  23   5
 186  27   5  17  23   2
 187  27   6  36  23   6
 188  27   7  19  23   0
 189  28   1  20  14   6
 190  28   2  29  14   1
 191  28   3  21  14   3
 192  28   4  20  14   5
 193  28   5  10  14   0
 194  28   6  26  14   4
 195  28   7  39  14   2
 196  29   1   8  29   6
 197  29   2  15  29   0
 198  29   3  23  29   2
 199  29   4  11  29   5
 200  29   5  36  29   3
 201  29   6  22  29   1
 202  29   7  22  29   4
 203  30   1   5  30   1
 204  30   2   9  30   0
 205  30   3  30  30   6
 206  30   4  13  30   3
 207  30   5  35  30   4
 208  30   6  27  30   2
 209  30   7  30  30   5
 210  31   1  12  20   5
 211  31   2  16  20   3
 212  31   3   7  20   4
 213  31   4  19  20   2
 214  31   5  17  20   1
 215  31   6  22  20   6
 216  31   7  33  20   0
 217  32   1   1   8   3
 218  32   2  13   8   1
 219  32   3   1   8   2
 220  32   4  17   8   5
 221  32   5  31   8   6
 222  32   6  36   8   4
 223  32   7  14   8   0
 224  33   1   9  30   2
 225  33   2   8  30   1
 226  33   3  26  30   3
 227  33   4   8  30   4
 228  33   5  28  30   0
 229  33   6  26  30   5
 230  33   7  27  30   6
 231  34   1   4  38   3
 232  34   2  30  38   2
 233  34   3   0  38   0
 234  34   4   9  38   5
 235  34   5  27  38   4
 236  34   6  34  38   6
 237  34   7  36  38   1
 238  35   1   2   5   3
 239  35   2   9   5   6
 240  35   3  35   5   5
 241  35   4   3   5   1
 242  35   5   4   5   0
 243  35   6  30   5   4
 244  35   8  18   5   2
 245  36   1  38   0   0
 246  36   2  31   0   4
 247  36   3  29   0   5
 248  36   4  12   0   2
 249  36   5  20   0   3
 250  36   6  34   0   1
 251  36   8  29   0   6